require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
const bcrypt = require('bcryptjs');
const mongoose = require('mongoose');
const jwt = require('jsonwebtoken');
const path = require('path'); // üÜï –¥–ª—è –≤—ã–¥–∞—á–∏ WebApp

const TelegramBot = require('node-telegram-bot-api');
const User = require('./models/User');
const UserProfile = require('./models/UserProfile');
const authRoutes = require('./routes/auth');
const profileRoutes = require('./routes/profile');

const app = express();
app.use(bodyParser.json());

// üß† –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ API –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use('/api/auth', authRoutes);
app.use('/api/profile', profileRoutes);

// üß± –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏–∫–∏ WebApp
app.use(express.static(path.join(__dirname, 'public')));

// üåê –û—Ç–¥–∞—á–∞ index.html –ø—Ä–∏ –∑–∞—Ö–æ–¥–µ –Ω–∞ /webapp
app.get('/webapp', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// ü§ñ Telegram Webhook
const TOKEN = process.env.BOT_TOKEN;
const bot = new TelegramBot(TOKEN);
const users = {};

app.post('/bot', async (req, res) => {
  const message = req.body.message;
  if (!message || !message.text) return res.sendStatus(200);

  const chatId = message.chat.id;
  const text = message.text.trim();

  if (text === '/start') {
    bot.sendMessage(chatId, 'üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HealthPulse üí™ –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É WebApp –≤–Ω–∏–∑—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!');
    return res.sendStatus(200);
  }

  if (text === '/register') {
    users[chatId] = { step: 'email' };
    bot.sendMessage(chatId, 'üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:');
    return res.sendStatus(200);
  }

  if (users[chatId]) {
    const step = users[chatId].step;

    if (step === 'email') {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(text)) {
        bot.sendMessage(chatId, '‚ùå Email –Ω–µ–≤–µ—Ä–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:');
        return res.sendStatus(200);
      }

      users[chatId] = {
        ...users[chatId],
        email: text,
        step: 'password'
      };

      bot.sendMessage(chatId, 'üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω. 8 —Å–∏–º–≤–æ–ª–æ–≤, 1 —Ü–∏—Ñ—Ä–∞, 1 —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª):');
      return res.sendStatus(200);
    }

    if (step === 'password') {
      const passwordRegex = /^(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})/;
      if (!passwordRegex.test(text)) {
        bot.sendMessage(chatId, '‚ùå –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:');
        return res.sendStatus(200);
      }

      const { email } = users[chatId];
      const telegramId = chatId.toString();

      try {
        const existingUser = await User.findOne({ telegramId });
        if (existingUser) {
          bot.sendMessage(chatId, 'üòÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!');
          delete users[chatId];
          return res.sendStatus(200);
        }

        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(text, salt);

        await User.create({ telegramId, email, password: hashedPassword });

        bot.sendMessage(chatId, '‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', err);
        bot.sendMessage(chatId, 'üö® –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.');
      }

      delete users[chatId];
      return res.sendStatus(200);
    }
  }

  bot.sendMessage(chatId, 'ü§ñ –ù–∞–ø–∏—à–∏ /register, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.');
  return res.sendStatus(200);
});

// üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ + MongoDB
const PORT = process.env.PORT || 5000;

mongoose
  .connect(process.env.MONGO_URI)
  .then(() => {
    console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω');
    app.listen(PORT, () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    });
  })
  .catch((err) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ MongoDB:', err);
  });
