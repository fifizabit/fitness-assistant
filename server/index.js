require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const bodyParser = require('body-parser');
const bcrypt = require('bcryptjs');
const mongoose = require('mongoose');

const User = require('./models/User'); // –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

const app = express();
app.use(bodyParser.json());

const TOKEN = process.env.BOT_TOKEN;
const bot = new TelegramBot(TOKEN);

const users = {}; // –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —à–∞–≥–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

// Telegram webhook —Ä–æ—É—Ç
app.post('/bot', async (req, res) => {
  const message = req.body.message;

  if (message) {
    const chatId = message.chat.id;
    const text = message.text;

    console.log("üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", chatId, text);

    if (text === '/start') {
      return bot.sendMessage(chatId, 'üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HealthPulse üí™ –ù–∞–ø–∏—à–∏ /register —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!');
    }

    // –®–∞–≥ 0: –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    if (text === '/register') {
      users[chatId] = { step: 'email' };
      return bot.sendMessage(chatId, 'üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:');
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if (users[chatId]) {
      const step = users[chatId].step;

      // –®–∞–≥ 1: Email
      if (step === 'email') {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(text)) {
          return bot.sendMessage(chatId, '‚ùå Email –Ω–µ–≤–µ—Ä–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:');
        }

        users[chatId].email = text;
        users[chatId].step = 'password';
        return bot.sendMessage(chatId, 'üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω. 8 —Å–∏–º–≤–æ–ª–æ–≤, 1 —Ü–∏—Ñ—Ä–∞, 1 —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª):');
      }

      // –®–∞–≥ 2: –ü–∞—Ä–æ–ª—å
      if (step === 'password') {
        const passwordRegex = /^(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})/;
        if (!passwordRegex.test(text)) {
          return bot.sendMessage(chatId, '‚ùå –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:');
        }

        const email = users[chatId].email;
        const password = text;
        const telegramId = chatId.toString();

        try {
          const existingUser = await User.findOne({ telegramId });
          if (existingUser) {
            return bot.sendMessage(chatId, 'üòÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!');
          }

          const salt = await bcrypt.genSalt(10);
          const hashedPassword = await bcrypt.hash(password, salt);

          await User.create({
            telegramId,
            email,
            password: hashedPassword,
          });

          bot.sendMessage(chatId, '‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!');
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', err);
          bot.sendMessage(chatId, 'üö® –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }

        delete users[chatId];
        return;
      }
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    bot.sendMessage(chatId, 'ü§ñ –ù–∞–ø–∏—à–∏ /register, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.');
  }

  res.sendStatus(200);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 5000;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –∏ –∑–∞–ø—É—Å–∫
mongoose
  .connect(process.env.MONGO_URI)
  .then(() => {
    console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω');
    app.listen(PORT, () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    });
  })
  .catch((err) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ MongoDB:', err);
  });
